/* Generated By:JavaCC: Do not edit this line. SimpleCharStream.java Version 2.1 */
using System;
namespace CodeStreet.Selector.Parser
{
	
	/// <summary> An implementation of interface CharStream, where the stream is assumed to
	/// contain only ASCII characters (without unicode processing).
	/// </summary>
	
	public sealed class SimpleCharStream
	{
		/// <deprecated> 
		/// </deprecated>
		/// <seealso cref="#getEndColumn">
		/// </seealso>
		public int Column
		{
			
			
			get
			{
				return bufcolumn[bufpos];
			}
			
		}
		/// <deprecated> 
		/// </deprecated>
		/// <seealso cref="#getEndLine">
		/// </seealso>
		public int Line
		{
			
			
			get
			{
				return bufline[bufpos];
			}
			
		}
		public int EndColumn
		{
			get
			{
				return bufcolumn[bufpos];
			}
			
		}
		public int EndLine
		{
			get
			{
				return bufline[bufpos];
			}
			
		}
		public int BeginColumn
		{
			get
			{
				return bufcolumn[tokenBegin];
			}
			
		}
		public int BeginLine
		{
			get
			{
				return bufline[tokenBegin];
			}
			
		}
		public const bool staticFlag = false;
		internal int bufsize;
		internal int available;
		internal int tokenBegin;
		public int bufpos = - 1;
		private int[] bufline;
		private int[] bufcolumn;
		
		private int column = 0;
		private int line = 1;
		
		private bool prevCharIsCR = false;
		private bool prevCharIsLF = false;
		
		private System.IO.StreamReader inputStream;
		
		private char[] buffer;
		private int maxNextCharInd = 0;
		private int inBuf = 0;
		
		private void  ExpandBuff(bool wrapAround)
		{
			char[] newbuffer = new char[bufsize + 2048];
			int[] newbufline = new int[bufsize + 2048];
			int[] newbufcolumn = new int[bufsize + 2048];
			
			try
			{
				if (wrapAround)
				{
					Array.Copy((System.Array) buffer, tokenBegin, (System.Array) newbuffer, 0, bufsize - tokenBegin);
					Array.Copy((System.Array) buffer, 0, (System.Array) newbuffer, bufsize - tokenBegin, bufpos);
					buffer = newbuffer;
					
					Array.Copy((System.Array) bufline, tokenBegin, (System.Array) newbufline, 0, bufsize - tokenBegin);
					Array.Copy((System.Array) bufline, 0, (System.Array) newbufline, bufsize - tokenBegin, bufpos);
					bufline = newbufline;
					
					Array.Copy((System.Array) bufcolumn, tokenBegin, (System.Array) newbufcolumn, 0, bufsize - tokenBegin);
					Array.Copy((System.Array) bufcolumn, 0, (System.Array) newbufcolumn, bufsize - tokenBegin, bufpos);
					bufcolumn = newbufcolumn;
					
					maxNextCharInd = (bufpos += (bufsize - tokenBegin));
				}
				else
				{
					Array.Copy((System.Array) buffer, tokenBegin, (System.Array) newbuffer, 0, bufsize - tokenBegin);
					buffer = newbuffer;
					
					Array.Copy((System.Array) bufline, tokenBegin, (System.Array) newbufline, 0, bufsize - tokenBegin);
					bufline = newbufline;
					
					Array.Copy((System.Array) bufcolumn, tokenBegin, (System.Array) newbufcolumn, 0, bufsize - tokenBegin);
					bufcolumn = newbufcolumn;
					
					maxNextCharInd = (bufpos -= tokenBegin);
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1100"'
			catch (System.Exception t)
			{
				//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1043"'
				throw new System.ApplicationException(t.Message);
			}
			
			
			bufsize += 2048;
			available = bufsize;
			tokenBegin = 0;
		}
		
		private void  FillBuff()
		{
			if (maxNextCharInd == available)
			{
				if (available == bufsize)
				{
					if (tokenBegin > 2048)
					{
						bufpos = maxNextCharInd = 0;
						available = tokenBegin;
					}
					else if (tokenBegin < 0)
						bufpos = maxNextCharInd = 0;
					else
						ExpandBuff(false);
				}
				else if (available > tokenBegin)
					available = bufsize;
				else if ((tokenBegin - available) < 2048)
					ExpandBuff(true);
				else
					available = tokenBegin;
			}
			
			int i;
			try
			{
				if (inputStream == null)
					throw new System.IO.IOException();

				//UPGRADE_TODO: Method 'java.io.Reader.read' was converted to 'System.IO.StreamReader.Read' which has a different behavior. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1073_javaioReaderread_char[]_int_int"'
				if ((i = inputStream.Read(buffer, maxNextCharInd, available - maxNextCharInd)) == 0)
				{
					inputStream.Close();
					inputStream = null;
					throw new System.IO.IOException();
				}
				else
					maxNextCharInd += i;
				return ;
			}
			catch (System.IO.IOException e)
			{
				--bufpos;
				backup(0);
				if (tokenBegin == - 1)
					tokenBegin = bufpos;
				throw e;
			}
		}
		
		public char BeginToken()
		{
			tokenBegin = - 1;
			char c = readChar();
			tokenBegin = bufpos;
			
			return c;
		}
		
		private void  UpdateLineColumn(char c)
		{
			column++;
			
			if (prevCharIsLF)
			{
				prevCharIsLF = false;
				line += (column = 1);
			}
			else if (prevCharIsCR)
			{
				prevCharIsCR = false;
				if (c == '\n')
				{
					prevCharIsLF = true;
				}
				else
					line += (column = 1);
			}
			
			switch (c)
			{
				
				case '\r': 
					prevCharIsCR = true;
					break;
				
				case '\n': 
					prevCharIsLF = true;
					break;
				
				case '\t': 
					column--;
					column += (8 - (column & 7));
					break;
				
				default: 
					break;
				
			}
			
			bufline[bufpos] = line;
			bufcolumn[bufpos] = column;
		}
		
		public char readChar()
		{
			if (inBuf > 0)
			{
				--inBuf;
				
				if (++bufpos == bufsize)
					bufpos = 0;
				
				return buffer[bufpos];
			}
			
			if (++bufpos >= maxNextCharInd)
				FillBuff();
			
			char c = buffer[bufpos];
			
			UpdateLineColumn(c);
			return (c);
		}
		
		public void  backup(int amount)
		{
			
			inBuf += amount;
			if ((bufpos -= amount) < 0)
				bufpos += bufsize;
		}
		
		public SimpleCharStream(System.IO.StreamReader dstream, int startline, int startcolumn, int buffersize)
		{
			inputStream = dstream;
			line = startline;
			column = startcolumn - 1;
			
			available = bufsize = buffersize;
			buffer = new char[buffersize];
			bufline = new int[buffersize];
			bufcolumn = new int[buffersize];
		}
		
		public SimpleCharStream(System.IO.StreamReader dstream, int startline, int startcolumn):this(dstream, startline, startcolumn, 4096)
		{
		}
		
		public SimpleCharStream(System.IO.StreamReader dstream):this(dstream, 1, 1, 4096)
		{
		}
		public void  ReInit(System.IO.StreamReader dstream, int startline, int startcolumn, int buffersize)
		{
			inputStream = dstream;
			line = startline;
			column = startcolumn - 1;
			
			if (buffer == null || buffersize != buffer.Length)
			{
				available = bufsize = buffersize;
				buffer = new char[buffersize];
				bufline = new int[buffersize];
				bufcolumn = new int[buffersize];
			}
			prevCharIsLF = prevCharIsCR = false;
			tokenBegin = inBuf = maxNextCharInd = 0;
			bufpos = - 1;
		}
		
		public void  ReInit(System.IO.StreamReader dstream, int startline, int startcolumn)
		{
			ReInit(dstream, startline, startcolumn, 4096);
		}
		
		public void  ReInit(System.IO.StreamReader dstream)
		{
			ReInit(dstream, 1, 1, 4096);
		}
		public SimpleCharStream(System.IO.Stream dstream, int startline, int startcolumn, int buffersize):this(new System.IO.StreamReader(dstream), startline, startcolumn, 4096)
		{
		}
		
		public SimpleCharStream(System.IO.Stream dstream, int startline, int startcolumn):this(dstream, startline, startcolumn, 4096)
		{
		}
		
		public SimpleCharStream(System.IO.Stream dstream):this(dstream, 1, 1, 4096)
		{
		}
		
		public void  ReInit(System.IO.Stream dstream, int startline, int startcolumn, int buffersize)
		{
			ReInit(new System.IO.StreamReader(dstream), startline, startcolumn, 4096);
		}
		
		public void  ReInit(System.IO.Stream dstream)
		{
			ReInit(dstream, 1, 1, 4096);
		}
		public void  ReInit(System.IO.Stream dstream, int startline, int startcolumn)
		{
			ReInit(dstream, startline, startcolumn, 4096);
		}
		public System.String GetImage()
		{
			if (bufpos >= tokenBegin)
				return new System.String(buffer, tokenBegin, bufpos - tokenBegin + 1);
			else
				return new System.String(buffer, tokenBegin, bufsize - tokenBegin) + new System.String(buffer, 0, bufpos + 1);
		}
		
		public char[] GetSuffix(int len)
		{
			char[] ret = new char[len];
			
			if ((bufpos + 1) >= len)
				Array.Copy((System.Array) buffer, bufpos - len + 1, (System.Array) ret, 0, len);
			else
			{
				Array.Copy((System.Array) buffer, bufsize - (len - bufpos - 1), (System.Array) ret, 0, len - bufpos - 1);
				Array.Copy((System.Array) buffer, 0, (System.Array) ret, len - bufpos - 1, bufpos + 1);
			}
			
			return ret;
		}
		
		public void  Done()
		{
			buffer = null;
			bufline = null;
			bufcolumn = null;
		}
		
		/// <summary> Method to adjust line and column numbers for the start of a token.<BR></summary>
		public void  adjustBeginLineColumn(int newLine, int newCol)
		{
			int start = tokenBegin;
			int len;
			
			if (bufpos >= tokenBegin)
			{
				len = bufpos - tokenBegin + inBuf + 1;
			}
			else
			{
				len = bufsize - tokenBegin + bufpos + 1 + inBuf;
			}
			
			int i = 0, j = 0, k = 0;
			int nextColDiff = 0, columnDiff = 0;
			
			while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize])
			{
				bufline[j] = newLine;
				nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
				bufcolumn[j] = newCol + columnDiff;
				columnDiff = nextColDiff;
				i++;
			}
			
			if (i < len)
			{
				bufline[j] = newLine++;
				bufcolumn[j] = newCol + columnDiff;
				
				while (i++ < len)
				{
					if (bufline[j = start % bufsize] != bufline[++start % bufsize])
						bufline[j] = newLine++;
					else
						bufline[j] = newLine;
				}
			}
			
			line = bufline[j];
			column = bufcolumn[j];
		}
	}
}